openapi: "3.0.2"
info:
  title: Elite Tapp API
  version: "1.0.0"
servers:
  - url: http://localhost:5000/api/v1
    description: Local
  - url: https://elite-tapp-api.herokuapp.com/api/v1
    description: Heroku Production
tags:
  - name: Auth
    description: Authentication related endpoints
  - name: User
    description: User related endpoints
  - name: Profile
    description: User profile related
  - name: Interests
    description: Interest related
  - name: Devices
    description: NFC tags/devices related endpoints
paths:
  /user/register:
    post:
      summary: Register user account
      description: Registers user in the system
      operationId: registerUser
      tags:
        - User
      requestBody:
        $ref: "#/components/requestBodies/RegisterBody"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAccountCreatedSchema"
        "409":
          description: Account exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
        "400":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/UnknownError"
  /user/activation/resend:
    post:
      summary: Resend activation code
      description: Resend activation code
      operationId: resendActivationCode
      tags:
        - User
      requestBody:
        $ref: "#/components/requestBodies/UserResetBody"
      responses:
        "200":
          description: Resent activation code
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserActicationResendSchema"
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
        "422":
          description: Account already verified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
        "400":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/UnknownError"
  /user/password/reset:
    post:
      summary: Reset password
      description: Reset password for user
      operationId: resetPassword
      tags:
        - User
      requestBody:
        $ref: "#/components/requestBodies/UserPasswordResetBody"
      responses:
        "200":
          $ref: "#/components/responses/OkResponse"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          description: Session expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
        "500":
          $ref: "#/components/responses/UnknownError"
  /user/password/reset/request:
    post:
      summary: Request password reset for user
      description: Request password reset for user
      operationId: requestPasswordReset
      tags:
        - User
      requestBody:
        $ref: "#/components/requestBodies/UserResetBody"
      responses:
        "200":
          description: Resent activation code
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPasswordResetRequestSchema"
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
        "422":
          description: Account not verified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
        "400":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/UnknownError"
  /user/check/username:
    get:
      summary: Check if username already taken
      description: Check if username already taken
      tags:
        - User
      operationId: isUsernameAvailable
      parameters:
        - in: query
          name: value
          schema:
            type: string
            example: jhondoe
          description: username to be checked
      responses:
        "200":
          description: Result
          content:
            application/json:
              schema:
                type: object
                properties:
                  available:
                    type: boolean
                    example: true
                    description: it is available
        "400":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/UnknownError"
  /user/username:
    put:
      summary: Set username for account
      description: Set unique username for this account
      tags:
        - User
      operationId: setUsername
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  $ref: "#/components/schemas/UsernameSchema"
      responses:
        "200":
          $ref: "#/components/responses/OkResponse"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnknownError"
        "409":
          $ref: "#/components/responses/UnknownError"
        "500":
          $ref: "#/components/responses/UnknownError"
  /auth/login:
    post:
      summary: Login to the app
      description: Issue login tokens for user
      operationId: loginUser
      tags:
        - Auth
      requestBody:
        $ref: "#/components/requestBodies/LoginBody"
      responses:
        "200":
          $ref: "#/components/responses/LoginSuccessResponse"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnknownError"
        "500":
          $ref: "#/components/responses/UnknownError"
  /auth/login/token:
    post:
      summary: Login to the app with refresh token
      description: Issue login tokens for user for refresh token
      operationId: loginRefreshToken
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  $ref: "#/components/schemas/RefreshToken"
      responses:
        "200":
          $ref: "#/components/responses/LoginSuccessResponse"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnknownError"
        "500":
          $ref: "#/components/responses/UnknownError"
  /auth/verify/account:
    post:
      summary: Verify user account
      description: Verify user account
      operationId: verifyAccount
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  $ref: "#/components/schemas/TokenSchema"
                otpCode:
                  $ref: "#/components/schemas/OTPCode"
              required:
                - verificationId
      responses:
        "200":
          $ref: "#/components/responses/OkResponse"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnknownError"
        "500":
          $ref: "#/components/responses/UnknownError"
  /auth/verify/otp:
    post:
      summary: Verify otp request and gives a session token
      description: Verify otp request and gives a session token
      operationId: verifyOtp
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestId:
                  $ref: "#/components/schemas/IdSchema"
                otpCode:
                  $ref: "#/components/schemas/OTPCode"
              required:
                - requestId
                - otpCode
      responses:
        "200":
          $ref: "#/components/responses/OtpAuthResponse"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnknownError"
        "500":
          $ref: "#/components/responses/UnknownError"
  /profile/me:
    patch:
      summary: Update current user profile
      description: Update the current user profile
      operationId: updateMyProfile
      security:
        - bearerAuth: []
      tags:
        - Profile
      requestBody:
        $ref: "#/components/requestBodies/ProfileUpdateBody"
      responses:
        "200":
          $ref: "#/components/responses/OkResponse"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnknownError"
        "500":
          $ref: "#/components/responses/UnknownError"
  /profile/me/interests:
    put:
      summary: Add/Update user interests
      description: Add/Update interests for user
      operationId: addUserInterests
      security:
        - bearerAuth: []
      tags:
        - Profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                interests:
                  type: array
                  description: an array of interests(order will be preserved)
                  items:
                    $ref: "#/components/schemas/IdSchema"
      responses:
        "200":
          $ref: "#/components/responses/OkResponse"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnknownError"
        "500":
          $ref: "#/components/responses/UnknownError"
  /interests:
    get:
      summary: Get interests
      description: Get all interests
      operationId: getInterests
      tags:
        - Interests
      responses:
        "200":
          $ref: "#/components/responses/InterestsAllResponse"
        "500":
          $ref: "#/components/responses/UnknownError"
  /devices/create:
    post:
      summary: Create a new device
      description: Creates a new NFC device and register it in backend
      operationId: createNewDevice
      tags:
        - Devices
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Device has been created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: device id
                    allOf:
                      - $ref: "#/components/schemas/IdSchema"
                  token:
                    type: string
                    example: sldadasldkasldsakdladkal
                    description: token for device(one time)
                  url:
                    type: string
                    description: Resource url for tag. Write this to NFC directly
                    example: https://elitetapp.co/u/1sldadasldkasldsakdladkal
        "401":
          $ref: "#/components/responses/UnknownError"
        "500":
          $ref: "#/components/responses/UnknownError"
  /devices/list:
    get:
      summary: Get user's devices as a list
      description: Get user's devices as a list
      operationId: getUserDevices
      tags:
        - Devices
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/DevicesListResponse"
        "401":
          $ref: "#/components/responses/UnknownError"
        "500":
          $ref: "#/components/responses/UnknownError"
  /devices/{deviceId}:
    patch:
      summary: Update device
      description: Update device
      operationId: updateDevice
      tags:
        - Devices
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: My Cool Tag
                  description: name of the device
                  nullable: true
                active:
                  type: boolean
                  example: true
                  description: Set device status
                  nullable: true
      responses:
        "200":
          $ref: "#/components/responses/OkResponse"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnknownError"
        "500":
          $ref: "#/components/responses/UnknownError"
    delete:
      summary: Delete device
      description: Delete the device from system
      operationId: deleteDevice
      tags:
        - Devices
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/OkResponse"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnknownError"
        "500":
          $ref: "#/components/responses/UnknownError"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    DevicesListResponse:
      description: Device list
      content:
        application/json:
          schema:
            type: object
            properties:
              devices:
                type: array
                items:
                  $ref: "#/components/schemas/DeviceSchema"
    LoginSuccessResponse:
      description: login success response
      content:
        application/json:
          schema:
            type: object
            properties:
              accessToken:
                $ref: "#/components/schemas/AccessToken"
              refreshToken:
                $ref: "#/components/schemas/RefreshToken"
              user:
                $ref: "#/components/schemas/UserPrivateBase"
    InterestsAllResponse:
      description: All interests
      content:
        application/json:
          schema:
            type: object
            properties:
              interests:
                type: array
                items:
                  $ref: "#/components/schemas/InterestSchema"
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"
    OkResponse:
      description: Ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MessageResponse"
    OtpAuthResponse:
      description: Ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OTPSessionSchema"
    UnknownError:
      description: Unknown Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"
    ValidationError:
      description: ValidationError Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"
  schemas:
    IdSchema:
      type: string
      description: Describes an resource id
      example: 6cf6f9fa-98bc-481e-91dd-57d13717ddde
    TokenSchema:
      type: string
      description: Token resource
      example: 6cf6f9fa-98bc-481e-91dd-57d13717ddde.ssddjjeee
    DeviceSchema:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/IdSchema"
        name:
          type: string
          description: Name of device
          example: My NFC Tag1
        active:
          type: boolean
          description: is this tag active
          example: true
    OTPCode:
      type: string
      description: OTP code if present
      example: "6111"
    OTPSessionSchema:
      type: object
      properties:
        sessionToken:
          type: string
          example: 6cf6f9fa-98bc-481e-91dd-57d13717ddde
          description: Authorized OTP session token to continue the task
    InterestSchema:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/IdSchema"
        title:
          type: string
          description: title of interest
          example: Coffee
    UsernameSchema:
      type: string
      description: Username
      example: jhondoe94
      pattern: ^(?=.{5,25}$)(?![_.-])(?!.*[_.]{2})[a-zA-Z0-9._-]+(?<![.-])$
    UserRegisterSchema:
      type: object
      description: User register
      properties:
        login:
          type: string
          description: email or phone number
          example: jhondoe@example.com
        password:
          type: string
          description: password
          example: mypassword
          minLength: 6
    UserAccountCreatedSchema:
      type: object
      properties:
        message:
          type: string
          example: "Account created"
        method:
          type: string
          enum:
            - phone
            - email
        verificationId:
          type: string
          description: OTP activation id when method is `phone`. For email this will be sent
          example: 6cf6f9fa-98bc-481e-91dd-57d13717ddde
          nullable: true
    UserActicationResendSchema:
      type: object
      properties:
        message:
          type: string
          example: "OK"
        method:
          type: string
          enum:
            - phone
            - email
        token:
          type: string
          description: OTP token when method is `phone`. For email this will be sent
          example: 6cf6f9fa-98bc-481e-91dd-57d13717ddde
          nullable: true
    UserPasswordResetRequestSchema:
      type: object
      properties:
        message:
          type: string
          example: "OK"
        method:
          type: string
          enum:
            - phone
            - email
        requestId:
          type: string
          description: OTP activation id when method is `phone`. For email this will be sent
          example: 6cf6f9fa-98bc-481e-91dd-57d13717ddde
          nullable: true
    UserPrivateBase:
      type: object
      properties:
        id:
          type: string
          example: 6cf6f9fa-98bc-481e-91dd-57d13717ddde
          description: Id of user
        username:
          type: string
          format: nullable
          example: jhon
          description: username
        email:
          type: string
          format: nullable
          example: jhondoe@example.com
          description: email
        phone:
          type: string
          example: +9471222220
          description: phone
        passwordSet:
          type: boolean
          description: Is password set for account
          example: false
    GenderSchema:
      type: string
      description: Specify a gender
      enum:
        - male
        - female
      nullable: true
    ProfileUpdateSchema:
      type: object
      properties:
        firstName:
          type: string
          description: first name
          example: Jhon
        lastName:
          type: string
          description: last name
          example: Doe
        dateOfBirth:
          type: string
          format: date
          description: date of birth
          example: 1995-06-04
        bio:
          type: string
          description: bio
          example: Lorem Ipsum Dor...
        gender:
          $ref: "#/components/schemas/GenderSchema"
    AccessToken:
      type: object
      properties:
        token:
          type: string
          example: token_1233333
        expires:
          type: string
          example: 2021-03-01T19:22:41.065Z
        tokenType:
          type: string
          example: Bearer
    RefreshToken:
      type: string
      example: 603cd9a09e798300a9aba8f2.b4
    MessageResponse:
      type: object
      description: message
      properties:
        message:
          type: string
          example: ok
    ValidationError:
      allOf:
        - $ref: "#/components/schemas/ErrorBase"
      properties:
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ValidationErrorField"
    ValidationErrorField:
      type: object
      properties:
        field:
          type: array
          items:
            type: string
        location:
          type: string
          example: body
        messages:
          type: array
          items:
            type: string
        types:
          type: array
          items:
            type: string
    APIError:
      allOf:
        - $ref: "#/components/schemas/ErrorBase"
      properties:
        errors:
          type: array
          title: an array of errors
          items:
            type: object
    ErrorBase:
      type: object
      properties:
        name:
          type: string
          title: Name of the error
        message:
          type: string
          title: Descriptive error message
        status:
          type: integer
          title: HTTP Error code
        errorCode:
          type: integer
          title: API Specific error code
  requestBodies:
    RegisterBody:
      description: JSON object with registration info
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserRegisterSchema"
    LoginBody:
      description: Login
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserRegisterSchema"
    UserResetBody:
      description: Reset user
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              login:
                type: string
                description: email or phone number
                example: jhondoe@example.com
    UserPasswordResetBody:
      description: Reset user
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                allOf:
                  - $ref: "#/components/schemas/TokenSchema"
                description: For emails `token` is embedded with activation link. For OTP use `sessionToken` here
              password:
                type: string
                description: Password
                example: mypass
            required:
              - token
              - password
    ProfileUpdateBody:
      description: Update user profile
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProfileUpdateSchema"
    CheckAvailabilityBody:
      description: Check Availability
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: string
                enum:
                  - email
                  - phone
                  - username
                description: type to be checked
                example: email
              value:
                type: string
                description: value to be checked
                example: jhondoe@example.com
  parameters:
    DeviceIdPathParam:
      in: path
      name: deviceId
      schema:
        type: string
        example: 8e9d94dd-6c04-48bb-882e-01f77f5224e9
      required: true
